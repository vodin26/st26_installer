name: CI/CD Pipeline to Yandex.Disk

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run BATS tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Install BATS testing framework
      run: |
        sudo apt-get update
        sudo apt-get install -y bats
        
    - name: Make installer executable
      run: chmod +x installer.sh
      
    - name: Execute tests
      run: |
        echo "Running BATS tests..."
        bats test_installer.bats || (echo "Tests failed" && exit 1)
        echo "All tests passed successfully"

  deploy:
    name: Deploy to Yandex.Disk
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup WebDAV environment
      env:
        YANDEX_USER: ${{ secrets.YANDEX_USER }}
        YANDEX_PASSWORD: ${{ secrets.YANDEX_PASSWORD }}
        YANDEX_BASE_FOLDER: ${{ secrets.YANDEX_BASE_FOLDER || 'github_deployments' }}
      run: |
        echo "Setting up WebDAV connection to Yandex.Disk..."
        sudo apt-get update -qq
        sudo apt-get install -yqq davfs2
        sudo mkdir -p /mnt/yandex_disk
        sudo chown -R $USER:$USER /mnt/yandex_disk
        echo "https://webdav.yandex.ru $YANDEX_USER $YANDEX_PASSWORD" > ~/davfs2_secrets
        chmod 600 ~/davfs2_secrets
        sudo mv ~/davfs2_secrets /etc/davfs2/secrets
        
        if ! sudo mount -t davfs https://webdav.yandex.ru /mnt/yandex_disk -o noexec,uid=$(id -u),gid=$(id -g); then
          echo "::error::Failed to mount Yandex.Disk"
          exit 1
        fi
        
        echo "Yandex.Disk successfully mounted"
        
        TARGET_DIR="/mnt/yandex_disk/$YANDEX_BASE_FOLDER"
        if [ ! -d "$TARGET_DIR" ]; then
          echo "Creating target directory: $TARGET_DIR"
          mkdir -p "$TARGET_DIR"
        fi
        
    - name: Prepare and copy files
      env:
        YANDEX_BASE_FOLDER: ${{ secrets.YANDEX_BASE_FOLDER || 'github_deployments' }}
      run: |
        DEPLOY_DIR="/mnt/yandex_disk/$YANDEX_BASE_FOLDER/deploy_$(date +'%Y-%m-%d_%H-%M-%S')"
        mkdir -p "$DEPLOY_DIR"
        
        # Copy files
        cp installer.sh "$DEPLOY_DIR/"
        cp test_installer.bats "$DEPLOY_DIR/"
        cp README.md "$DEPLOY_DIR/"
        
        if [ -d "node_modules" ]; then
          cp -r node_modules "$DEPLOY_DIR/"
        fi
        
        echo "Deployment time: $(date)" > "$DEPLOY_DIR/deployment_info.txt"
        echo "Commit: $GITHUB_SHA" >> "$DEPLOY_DIR/deployment_info.txt"
        
        echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV
        echo "::notice::Files copied to $DEPLOY_DIR"
        
    - name: Verify basic deployment
      run: |
        if [ ! -f "$DEPLOY_DIR/installer.sh" ]; then
          echo "::error::Main installer file missing in deployment"
          exit 1
        fi
        echo "Basic deployment verification passed"
        
    - name: Unmount Yandex.Disk
      if: always()
      run: |
        if mountpoint -q /mnt/yandex_disk; then
          sudo umount /mnt/yandex_disk
          echo "Yandex.Disk successfully unmounted"
        fi
        sudo rm -f /etc/davfs2/secrets

  healthcheck:
    name: Healthcheck Verification
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup WebDAV environment
      env:
        YANDEX_USER: ${{ secrets.YANDEX_USER }}
        YANDEX_PASSWORD: ${{ secrets.YANDEX_PASSWORD }}
        YANDEX_BASE_FOLDER: ${{ secrets.YANDEX_BASE_FOLDER || 'github_deployments' }}
      run: |
        echo "Setting up WebDAV for healthcheck..."
        sudo apt-get update -qq
        sudo apt-get install -yqq davfs2
        sudo mkdir -p /mnt/yandex_disk_hc
        echo "https://webdav.yandex.ru $YANDEX_USER $YANDEX_PASSWORD" > ~/davfs2_secrets
        chmod 600 ~/davfs2_secrets
        sudo mv ~/davfs2_secrets /etc/davfs2/secrets
        
        if ! sudo mount -t davfs https://webdav.yandex.ru /mnt/yandex_disk_hc -o noexec,uid=$(id -u),gid=$(id -g); then
          echo "::error::Failed to mount Yandex.Disk for healthcheck"
          exit 1
        fi
        
    - name: Get latest deployment directory
      id: get_deployment
      run: |
        BASE_DIR="/mnt/yandex_disk_hc/$YANDEX_BASE_FOLDER"
        DEPLOY_DIR=$(ls -td "$BASE_DIR"/deploy_* | head -1)
        
        if [ -z "$DEPLOY_DIR" ]; then
          echo "::error::No deployment directories found"
          exit 1
        fi
        
        echo "Checking deployment in: $DEPLOY_DIR"
        echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV
        
    - name: Run healthchecks
      run: |
        echo "Running comprehensive healthchecks..."
        
        # 1. File existence check
        REQUIRED_FILES=("installer.sh" "test_installer.bats" "README.md")
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$DEPLOY_DIR/$file" ]; then
            echo "::error::Required file missing: $file"
            exit 1
          fi
        done
        
        # 2. File permissions check
        if [ ! -x "$DEPLOY_DIR/installer.sh" ]; then
          echo "::error::Installer is not executable"
          exit 1
        fi
        
        # 3. Checksum verification
        echo "Verifying file checksums..."
        LOCAL_HASH=$(sha256sum installer.sh | awk '{print $1}')
        DEPLOYED_HASH=$(sha256sum "$DEPLOY_DIR/installer.sh" | awk '{print $1}')
        
        if [ "$LOCAL_HASH" != "$DEPLOYED_HASH" ]; then
          echo "::error::Checksum mismatch for installer.sh"
          echo "Local: $LOCAL_HASH"
          echo "Deployed: $DEPLOYED_HASH"
          exit 1
        fi
        
        # 4. Syntax check
        echo "Checking script syntax..."
        if ! bash -n "$DEPLOY_DIR/installer.sh"; then
          echo "::error::Syntax error in deployed installer"
          exit 1
        fi
        
        # 5. Smoke test
        echo "Running smoke tests..."
        if ! bats "$DEPLOY_DIR/test_installer.bats"; then
          echo "::error::Smoke tests failed"
          exit 1
        fi
        
        echo "All healthchecks passed successfully"
        
    - name: Unmount Yandex.Disk
      if: always()
      run: |
        if mountpoint -q /mnt/yandex_disk_hc; then
          sudo umount /mnt/yandex_disk_hc
        fi
        sudo rm -f /etc/davfs2/secrets
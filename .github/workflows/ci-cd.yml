name: CI/CD Pipeline to Yandex.Disk

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  YANDEX_BASE_FOLDER: ${{ secrets.YANDEX_BASE_FOLDER || 'github_deployments' }}

jobs:
  test:
    name: Run BATS tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code (without submodules)
      uses: actions/checkout@v3
      with:
        submodules: false
        
    - name: Clean submodule artifacts
      run: |
        git submodule deinit -f . || true
        rm -rf .git/modules/* || true
        
    - name: Install BATS and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bats
        npm install # если нужны зависимости из package.json
        
    - name: Make scripts executable
      run: |
        chmod +x installer.sh
        chmod +x test_installer.bats || true
        
    - name: Execute tests
      run: |
        echo "Running BATS tests..."
        bats test_installer.bats
        echo "All tests passed successfully"

  deploy:
    name: Deploy to Yandex.Disk
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup WebDAV environment
      env:
        YANDEX_USER: ${{ secrets.YANDEX_USER }}
        YANDEX_PASSWORD: ${{ secrets.YANDEX_PASSWORD }}
      run: |
        echo "Setting up WebDAV connection..."
        sudo apt-get update -qq
        sudo apt-get install -yqq davfs2
        
        # Configure mount point
        sudo mkdir -p /mnt/yandex_disk
        sudo chown -R $USER:$USER /mnt/yandex_disk
        
        # Store credentials securely
        echo "https://webdav.yandex.ru $YANDEX_USER $YANDEX_PASSWORD" | sudo tee /etc/davfs2/secrets
        sudo chmod 600 /etc/davfs2/secrets
        
        # Mount with retry logic
        for i in {1..3}; do
          if sudo mount -t davfs https://webdav.yandex.ru /mnt/yandex_disk -o noexec,uid=$(id -u),gid=$(id -g); then
            echo "Mounted successfully on attempt $i"
            break
          else
            echo "Mount attempt $i failed"
            sleep 5
          fi
        done
        
        # Verify mount
        if ! mountpoint -q /mnt/yandex_disk; then
          echo "::error::Failed to mount Yandex.Disk after 3 attempts"
          exit 1
        fi
        
    - name: Prepare deployment
      run: |
        # Create unique deployment directory
        DEPLOY_TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
        DEPLOY_DIR="/mnt/yandex_disk/$YANDEX_BASE_FOLDER/deploy_$DEPLOY_TIMESTAMP"
        mkdir -p "$DEPLOY_DIR"
        
        # Copy essential files
        cp -v installer.sh "$DEPLOY_DIR/"
        cp -v test_installer.bats "$DEPLOY_DIR/"
        cp -v README.md "$DEPLOY_DIR/"
        
        # Optional: copy node_modules if exists
        [ -d "node_modules" ] && cp -r node_modules "$DEPLOY_DIR/" || echo "No node_modules to copy"
        
        # Create deployment info file
        cat <<EOF > "$DEPLOY_DIR/deployment_info.txt"
        Deployment time: $(date)
        Commit: $GITHUB_SHA
        Workflow: $GITHUB_RUN_ID
        EOF
        
        echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV
        echo "::notice::Files deployed to $DEPLOY_DIR"
        
    - name: Basic deployment verification
      run: |
        if [ ! -f "$DEPLOY_DIR/installer.sh" ]; then
          echo "::error::Main installer file missing in deployment"
          exit 1
        fi
        echo "Deployment verified successfully"

    - name: Unmount Yandex.Disk
      if: always()
      run: |
        if mountpoint -q /mnt/yandex_disk; then
          sudo umount /mnt/yandex_disk || echo "Unmount failed but continuing"
        fi
        sudo rm -f /etc/davfs2/secrets

  healthcheck:
    name: Post-Deployment Healthcheck
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Mount Yandex.Disk
      env:
        YANDEX_USER: ${{ secrets.YANDEX_USER }}
        YANDEX_PASSWORD: ${{ secrets.YANDEX_PASSWORD }}
      run: |
        sudo apt-get update -qq
        sudo apt-get install -yqq davfs2
        sudo mkdir -p /mnt/yandex_hc
        echo "https://webdav.yandex.ru $YANDEX_USER $YANDEX_PASSWORD" | sudo tee /etc/davfs2/secrets
        sudo chmod 600 /etc/davfs2/secrets
        
        if ! sudo mount -t davfs https://webdav.yandex.ru /mnt/yandex_hc -o noexec,uid=$(id -u),gid=$(id -g); then
          echo "::error::Failed to mount for healthcheck"
          exit 1
        fi
        
    - name: Find latest deployment
      id: find_deploy
      run: |
        DEPLOY_DIR=$(ls -td /mnt/yandex_hc/$YANDEX_BASE_FOLDER/deploy_* | head -1)
        if [ -z "$DEPLOY_DIR" ]; then
          echo "::error::No deployment directories found"
          exit 1
        fi
        echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV
        echo "Checking deployment in: $DEPLOY_DIR"
        
    - name: Run comprehensive healthcheck
      run: |
        # 1. File verification
        declare -a REQUIRED_FILES=("installer.sh" "README.md")
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$DEPLOY_DIR/$file" ]; then
            echo "::error::Missing required file: $file"
            exit 1
          fi
        done
        
        # 2. Checksum validation
        echo "Verifying file integrity..."
        LOCAL_HASH=$(sha256sum installer.sh | cut -d' ' -f1)
        REMOTE_HASH=$(sha256sum "$DEPLOY_DIR/installer.sh" | cut -d' ' -f1)
        
        if [ "$LOCAL_HASH" != "$REMOTE_HASH" ]; then
          echo "::error::Checksum mismatch for installer.sh"
          echo "Expected: $LOCAL_HASH"
          echo "Actual: $REMOTE_HASH"
          exit 1
        fi
        
        # 3. Syntax check
        echo "Checking script syntax..."
        if ! bash -n "$DEPLOY_DIR/installer.sh"; then
          echo "::error::Syntax error in deployed installer"
          exit 1
        fi
        
        # 4. Functional test
        echo "Running functional tests..."
        if [ -f "$DEPLOY_DIR/test_installer.bats" ]; then
          if ! bats "$DEPLOY_DIR/test_installer.bats"; then
            echo "::error::Functional tests failed"
            exit 1
          fi
        fi
        
        echo "::notice::All healthchecks passed successfully"
        
    - name: Unmount and cleanup
      if: always()
      run: |
        if mountpoint -q /mnt/yandex_hc; then
          sudo umount /mnt/yandex_hc || echo "Unmount failed but continuing"
        fi
        sudo rm -f /etc/davfs2/secrets
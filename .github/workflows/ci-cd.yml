# Основной workflow для CI/CD пайплайна с деплоем на Яндекс.Диск
# Автоматически запускается при пушах и пул-реквестах в ветки main/master
name: CI/CD Pipeline to Yandex.Disk

# Триггеры запуска:
on:
  push:
    branches: [ main, master ]  # Запуск при обновлении этих веток
  pull_request:
    branches: [ main, master ]  # Запуск для PR в эти ветки

# Глобальные переменные:
env:
  # Базовая папка на Яндекс.Диске (берётся из секретов или используется значение по умолчанию)
  YANDEX_BASE_FOLDER: ${{ secrets.YANDEX_BASE_FOLDER || 'github_deployments' }}

# Основные jobs:
jobs:
  # Job 1: Запуск BATS-тестов
  test:
    name: Run BATS tests
    runs-on: ubuntu-latest  # Используем последний Ubuntu
    
    steps:
    # Шаг 1: Получаем код репозитория
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: false  # Явно отключаем подмодули
        
    # Шаг 2: Чистим возможные артефакты подмодулей
    - name: Clean submodule artifacts
      run: |
        git submodule deinit -f . || true
        rm -rf .git/modules/* || true
        
    # Шаг 3: Устанавливаем BATS (фреймворк для тестирования bash-скриптов)
    - name: Install BATS
      run: |
        sudo apt-get update
        sudo apt-get install -y bats
        
    # Шаг 4: Даём права на выполнение скриптов
    - name: Make scripts executable
      run: |
        chmod +x installer.sh  # Основной скрипт
        [ -f "test_installer.bats" ] && chmod +x test_installer.bats || true  # Тесты, если есть
        
    # Шаг 5: Запускаем тесты
    - name: Execute tests
      run: |
        echo "Running BATS tests..."
        if [ -f "test_installer.bats" ]; then
          bats test_installer.bats || (echo "Tests failed" && exit 1)
        else
          echo "No test file found, skipping"
        fi

  # Job 2: Деплой на Яндекс.Диск (запускается только после успешных тестов)
  deploy:
    name: Deploy to Yandex.Disk
    needs: test  # Зависит от успешного выполнения тестов
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'  # Только для main/master
    runs-on: ubuntu-latest
    
    steps:
    # Шаг 1: Получаем код
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Шаг 2: Настраиваем подключение к Яндекс.Диску через WebDAV
    - name: Setup WebDAV environment
      env:
        YANDEX_USER: ${{ secrets.YANDEX_USER }}      # Логин из секретов
        YANDEX_PASSWORD: ${{ secrets.YANDEX_PASSWORD }}  # Пароль из секретов
      run: |
        echo "Setting up WebDAV connection..."
        sudo apt-get update -qq
        sudo apt-get install -yqq davfs2  # Устанавливаем WebDAV клиент
        
        # Создаем точку монтирования
        sudo mkdir -p /mnt/yandex_disk
        sudo chown -R $USER:$USER /mnt/yandex_disk
        
        # Сохраняем учетные данные (безопасно)
        echo "https://webdav.yandex.ru $YANDEX_USER $YANDEX_PASSWORD" | sudo tee /etc/davfs2/secrets
        sudo chmod 600 /etc/davfs2/secrets  # Только для владельца
        
        # Пытаемся монтировать (3 попытки)
        for i in {1..3}; do
          if sudo mount -t davfs https://webdav.yandex.ru /mnt/yandex_disk -o noexec,uid=$(id -u),gid=$(id -g); then
            echo "Mounted successfully on attempt $i"
            break
          else
            echo "Mount attempt $i failed"
            sleep 5
          fi
        done
        
        # Проверяем успешность монтирования
        if ! mountpoint -q /mnt/yandex_disk; then
          echo "::error::Failed to mount Yandex.Disk after 3 attempts"
          exit 1
        fi
        
    # Шаг 3: Подготовка и копирование файлов
    - name: Prepare and copy files
      run: |
        # Создаем уникальную папку для деплоя с timestamp
        DEPLOY_DIR="/mnt/yandex_disk/$YANDEX_BASE_FOLDER/deploy_$(date +'%Y-%m-%d_%H-%M-%S')"
        mkdir -p "$DEPLOY_DIR"
        
        # Копируем только существующие файлы:
        [ -f "installer.sh" ] && cp -v installer.sh "$DEPLOY_DIR/"
        [ -f "test_installer.bats" ] && cp -v test_installer.bats "$DEPLOY_DIR/"
        [ -f "README.md" ] && cp -v README.md "$DEPLOY_DIR/"
        
        # Создаем файл с информацией о деплое
        cat <<EOF > "$DEPLOY_DIR/deployment_info.txt"
        Deployment time: $(date)
        Commit: $GITHUB_SHA
        Workflow: $GITHUB_RUN_ID
        EOF
        
        # Сохраняем путь для следующих шагов
        echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV
        echo "::notice::Files deployed to $DEPLOY_DIR"
        
    # Шаг 4: Базовая проверка деплоя
    - name: Verify deployment
      run: |
        if [ ! -f "$DEPLOY_DIR/installer.sh" ]; then
          echo "::error::Main installer file missing in deployment"
          exit 1
        fi
        echo "Deployment verified successfully"

    # Шаг 5: Размонтирование (выполняется всегда, даже при ошибках)
    - name: Unmount Yandex.Disk
      if: always()
      run: |
        if mountpoint -q /mnt/yandex_disk; then
          sudo umount /mnt/yandex_disk || echo "Unmount failed but continuing"
        fi
        # Удаляем учетные данные
        sudo rm -f /etc/davfs2/secrets

  # Job 3: Healthcheck (проверка работоспособности после деплоя)
  healthcheck:
    name: Post-Deployment Healthcheck
    needs: deploy  # Зависит от успешного деплоя
    runs-on: ubuntu-latest
    
    steps:
    # Шаг 1: Монтируем Яндекс.Диск (отдельное подключение)
    - name: Mount Yandex.Disk
      env:
        YANDEX_USER: ${{ secrets.YANDEX_USER }}
        YANDEX_PASSWORD: ${{ secrets.YANDEX_PASSWORD }}
      run: |
        sudo apt-get update -qq
        sudo apt-get install -yqq davfs2
        sudo mkdir -p /mnt/yandex_hc  # Отдельная точка монтирования для healthcheck
        echo "https://webdav.yandex.ru $YANDEX_USER $YANDEX_PASSWORD" | sudo tee /etc/davfs2/secrets
        sudo chmod 600 /etc/davfs2/secrets
        
        if ! sudo mount -t davfs https://webdav.yandex.ru /mnt/yandex_hc -o noexec,uid=$(id -u),gid=$(id -g); then
          echo "::error::Failed to mount for healthcheck"
          exit 1
        fi
        
    # Шаг 2: Находим последнюю папку с деплоем
    - name: Find latest deployment
      run: |
        # Ищем последнюю созданную папку
        DEPLOY_DIR=$(ls -td /mnt/yandex_hc/$YANDEX_BASE_FOLDER/deploy_* | head -1)
        if [ -z "$DEPLOY_DIR" ]; then
          echo "::error::No deployment directories found"
          exit 1
        fi
        echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV
        echo "Checking deployment in: $DEPLOY_DIR"
        
    # Шаг 3: Запускаем проверки
    - name: Run healthchecks
      run: |
        echo "Running comprehensive healthchecks..."
        
        # 1. Проверка наличия обязательных файлов
        declare -a REQUIRED_FILES=("installer.sh" "README.md")
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$DEPLOY_DIR/$file" ]; then
            echo "::error::Missing required file: $file"
            exit 1
          fi
        done
        
        # 2. Проверка контрольных сумм
        echo "Verifying file integrity..."
        LOCAL_HASH=$(sha256sum installer.sh | cut -d' ' -f1)
        REMOTE_HASH=$(sha256sum "$DEPLOY_DIR/installer.sh" | cut -d' ' -f1)
        
        if [ "$LOCAL_HASH" != "$REMOTE_HASH" ]; then
          echo "::error::Checksum mismatch for installer.sh"
          echo "Expected: $LOCAL_HASH"
          echo "Actual: $REMOTE_HASH"
          exit 1
        fi
        
        # 3. Проверка синтаксиса скриптов
        echo "Checking script syntax..."
        if ! bash -n "$DEPLOY_DIR/installer.sh"; then
          echo "::error::Syntax error in deployed installer"
          exit 1
        fi
        
        # 4. Запуск smoke-тестов
        echo "Running smoke tests..."
        if [ -f "$DEPLOY_DIR/test_installer.bats" ]; then
          if ! bats "$DEPLOY_DIR/test_installer.bats"; then
            echo "::error::Smoke tests failed"
            exit 1
          fi
        fi
        
        echo "::notice::All healthchecks passed successfully"
        
    # Шаг 4: Размонтирование (выполняется всегда)
    - name: Unmount and cleanup
      if: always()
      run: |
        if mountpoint -q /mnt/yandex_hc; then
          sudo umount /mnt/yandex_hc || echo "Unmount failed but continuing"
        fi
        sudo rm -f /etc/davfs2/secrets